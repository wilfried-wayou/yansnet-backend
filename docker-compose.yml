version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: etsia-postgres
    environment:
      POSTGRES_DB: yansnet-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qwertyuiop
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migration:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - etsia-network

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    container_name: etsia-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/yansnet-db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: qwertyuiop
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
    command:
      - start-dev
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: 127.0.0.1:8080\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - etsia-network

  # Application Spring Boot
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: etsia-backend
    environment:
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/yansnet-db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: qwertyuiop
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true

      # Keycloak OAuth2
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/yansnet
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/yansnet/protocol/openid-connect/certs

      # Keycloak Client Config
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: yansnet
      KEYCLOAK_ADMIN_CLIENT_ID: admin-cli
      KEYCLOAK_ADMIN_USERNAME: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_CLIENT_ID: yansnet-client-test-01
      KEYCLOAK_CLIENT_SECRET: yansnet-client-test-01

      # Spring Profile
      SPRING_PROFILES_ACTIVE: docker

      # JVM Options
      JAVA_OPTS: -Xmx512m -Xms256m
    ports:
      - "8085:8085"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - etsia-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  etsia-network:
    driver: bridge
